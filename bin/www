#!/usr/bin/env node
'use strict';

const app = require('../app');
const debug = require('debug')('ico-backend:server');
const logger = require('../lib/logger');

const http = require('http');
const setSocket = require('../controllers/socket');
const sockIo = require('socket.io');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

logger.debug('[Server]', 'HTTP server running in port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, 'localhost');
server.on('error', onError);
server.on('listening', onListening);


// Open socket with server, path /sock
const io = sockIo(server, {
  path: '/sock'
});
// Assigning the connection to an exported entity, and setting listeners
setSocket(io);

/**
 *
 * @param {Number} val - named pipe
 * @return {Number} port
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return 0;
}

/**
 *
 * @param {Error} error - throwed error
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 *
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;

  debug('Listening on ' + bind);
}
